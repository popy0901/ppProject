//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbScene
// {
//
//   row_major float4x4 viewProjection; // Offset:    0 Size:    64
//   float4 lightDirection;             // Offset:   64 Size:    16
//
// }
//
// cbuffer CbMesh
// {
//
//   row_major float4x4 boneTransforms[128];// Offset:    0 Size:  8192
//
// }
//
// cbuffer CbSubset
// {
//
//   float4 materialColor;              // Offset:    0 Size:    16
//   float4 LightColor;                 // Offset:   16 Size:    16 [unused]
//   float4 AmbientColor;               // Offset:   32 Size:    16 [unused]
//   float4 EyePos;                     // Offset:   48 Size:    16 [unused]
//   float4 Paramter;                   // Offset:   64 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CbScene                           cbuffer      NA          NA            cb0      1 
// CbMesh                            cbuffer      NA          NA            cb1      1 
// CbSubset                          cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// COLOR                    0   xyzw        3     NONE   float   xyzw
// WEIGHTS                  0   xyzw        4     NONE   float   xyzw
// BONES                    0   xyzw        5     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyz         2     NONE   float   xyz 
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
// TEXCOORD                 2   xy          4     NONE   float   xy  
//
gs_4_0
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer CB0[5], immediateIndexed
dcl_constantbuffer CB1[512], dynamicIndexed
dcl_constantbuffer CB2[5], immediateIndexed
dcl_input v[3][0].xyz
dcl_input v[3][1].xyz
dcl_input v[3][2].xy
dcl_input v[3][3].xyzw
dcl_input v[3][4].xyzw
dcl_input v[3][5].xyzw
dcl_temps 9
dcl_inputprimitive triangle 
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xy
dcl_maxout 3
//
// Initial variable locations:
//   m0 <- output; 
//   v[0][0].x <- input[0].Position.x; v[0][0].y <- input[0].Position.y; v[0][0].z <- input[0].Position.z; 
//   v[0][1].x <- input[0].Normal.x; v[0][1].y <- input[0].Normal.y; v[0][1].z <- input[0].Normal.z; 
//   v[0][2].x <- input[0].Tex.x; v[0][2].y <- input[0].Tex.y; 
//   v[0][3].x <- input[0].Color.x; v[0][3].y <- input[0].Color.y; v[0][3].z <- input[0].Color.z; v[0][3].w <- input[0].Color.w; 
//   v[0][4].x <- input[0].BoneWeights.x; v[0][4].y <- input[0].BoneWeights.y; v[0][4].z <- input[0].BoneWeights.z; v[0][4].w <- input[0].BoneWeights.w; 
//   v[0][5].x <- input[0].BoneIndices.x; v[0][5].y <- input[0].BoneIndices.y; v[0][5].z <- input[0].BoneIndices.z; v[0][5].w <- input[0].BoneIndices.w; 
//   v[1][0].x <- input[1].Position.x; v[1][0].y <- input[1].Position.y; v[1][0].z <- input[1].Position.z; 
//   v[1][1].x <- input[1].Normal.x; v[1][1].y <- input[1].Normal.y; v[1][1].z <- input[1].Normal.z; 
//   v[1][2].x <- input[1].Tex.x; v[1][2].y <- input[1].Tex.y; 
//   v[1][3].x <- input[1].Color.x; v[1][3].y <- input[1].Color.y; v[1][3].z <- input[1].Color.z; v[1][3].w <- input[1].Color.w; 
//   v[1][4].x <- input[1].BoneWeights.x; v[1][4].y <- input[1].BoneWeights.y; v[1][4].z <- input[1].BoneWeights.z; v[1][4].w <- input[1].BoneWeights.w; 
//   v[1][5].x <- input[1].BoneIndices.x; v[1][5].y <- input[1].BoneIndices.y; v[1][5].z <- input[1].BoneIndices.z; v[1][5].w <- input[1].BoneIndices.w; 
//   v[2][0].x <- input[2].Position.x; v[2][0].y <- input[2].Position.y; v[2][0].z <- input[2].Position.z; 
//   v[2][1].x <- input[2].Normal.x; v[2][1].y <- input[2].Normal.y; v[2][1].z <- input[2].Normal.z; 
//   v[2][2].x <- input[2].Tex.x; v[2][2].y <- input[2].Tex.y; 
//   v[2][3].x <- input[2].Color.x; v[2][3].y <- input[2].Color.y; v[2][3].z <- input[2].Color.z; v[2][3].w <- input[2].Color.w; 
//   v[2][4].x <- input[2].BoneWeights.x; v[2][4].y <- input[2].BoneWeights.y; v[2][4].z <- input[2].BoneWeights.z; v[2][4].w <- input[2].BoneWeights.w; 
//   v[2][5].x <- input[2].BoneIndices.x; v[2][5].y <- input[2].BoneIndices.y; v[2][5].z <- input[2].BoneIndices.z; v[2][5].w <- input[2].BoneIndices.w
//
#line 31 "C:\Users\popy\Desktop\個人\new lib\HLSL\DestractionGS.hlsl"
add r0.xyz, v[1][0].xyzx, v[0][0].xyzx
add r0.xyz, r0.xyzx, v[2][0].xyzx
itof r1.xyz, l(3, 3, 3, 0)
div r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- cPos.x; r0.y <- cPos.y; r0.z <- cPos.z

#line 36
mov r1.xyz, -v[0][0].zxyz
add r1.xyz, r1.xyzx, v[1][0].zxyz  // r1.x <- AB.z; r1.y <- AB.x; r1.z <- AB.y

#line 37
mov r2.xyz, -v[1][0].yzxy
add r2.xyz, r2.xyzx, v[2][0].yzxy  // r2.x <- BC.y; r2.y <- BC.z; r2.z <- BC.x

#line 38
mul r3.xyz, r1.zxyz, r2.yzxy
mul r1.xyz, r1.xyzx, r2.xyzx
mov r1.xyz, -r1.xyzx
add r1.xyz, r1.xyzx, r3.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z

#line 39
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx

#line 43
mov r0.w, l(0)  // r0.w <- i
mov r1.w, r0.w  // r1.w <- i
loop 
  ilt r2.x, r1.w, l(3)
  breakc_z r2.x

#line 45
  mov r2.xyz, v[r1.w + 0][0].xyzx  // r2.x <- P.x; r2.y <- P.y; r2.z <- P.z

#line 48
  mov r3.xyz, -r0.xyzx
  add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- v.x; r2.y <- v.y; r2.z <- v.z

#line 49
  mul r2.xyz, r2.xyzx, cb2[4].yyyy

#line 52
  nop 
  mov r3.xyz, cb2[4].zzzz

#line 9
  sincos r3.w, null, r3.x  // r3.w <- sx
  sincos null, r3.x, r3.x  // r3.x <- cx

#line 10
  sincos r4.x, null, r3.y  // r4.x <- sy
  sincos null, r3.y, r3.y  // r3.y <- cy

#line 11
  sincos r4.y, null, r3.z  // r4.y <- sz
  sincos null, r3.z, r3.z  // r3.z <- cz

#line 13
  mul r5.x, r3.z, r3.y  // r5.x <- rot._m00

#line 14
  mul r5.y, r3.y, r4.y  // r5.y <- rot._m01

#line 15
  mov r5.z, -r4.x  // r5.z <- rot._m02

#line 16
  mul r4.z, r3.w, r4.x
  mul r4.z, r3.z, r4.z
  mul r4.w, r3.x, r4.y
  mov r4.w, -r4.w
  add r6.x, r4.w, r4.z  // r6.x <- rot._m10

#line 17
  mul r4.z, r3.w, r4.x
  mul r4.z, r4.y, r4.z
  mul r4.w, r3.z, r3.x
  add r6.y, r4.w, r4.z  // r6.y <- rot._m11

#line 18
  mul r6.z, r3.y, r3.w  // r6.z <- rot._m12

#line 19
  mul r4.z, r3.x, r4.x
  mul r4.z, r3.z, r4.z
  mul r4.w, r3.w, r4.y
  add r7.x, r4.w, r4.z  // r7.x <- rot._m20

#line 20
  mul r4.x, r3.x, r4.x
  mul r4.x, r4.y, r4.x
  mul r3.z, r3.z, r3.w
  mov r3.z, -r3.z
  add r7.y, r3.z, r4.x  // r7.y <- rot._m21

#line 21
  mul r7.z, r3.y, r3.x  // r7.z <- rot._m22

#line 22
  itof r7.w, l(0)  // r7.w <- rot._m32
  mov r7.w, r7.w  // r7.w <- rot._m31
  mov r7.w, r7.w  // r7.w <- rot._m30
  mov r7.w, r7.w  // r7.w <- rot._m23
  mov r7.w, r7.w  // r7.w <- rot._m13
  mov r6.w, r7.w  // r6.w <- rot._m03

#line 24
  mov r5.x, r5.x  // r5.x <- <rotation return value>._m00
  mov r5.y, r5.y  // r5.y <- <rotation return value>._m01
  mov r5.z, r5.z  // r5.z <- <rotation return value>._m02
  mov r5.w, r6.w  // r5.w <- <rotation return value>._m03
  mov r6.x, r6.x  // r6.x <- <rotation return value>._m10
  mov r6.y, r6.y  // r6.y <- <rotation return value>._m11
  mov r6.z, r6.z  // r6.z <- <rotation return value>._m12
  mov r6.w, r6.w  // r6.w <- <rotation return value>._m13
  mov r7.x, r7.x  // r7.x <- <rotation return value>._m20
  mov r7.y, r7.y  // r7.y <- <rotation return value>._m21
  mov r7.z, r7.z  // r7.z <- <rotation return value>._m22
  mov r7.w, r7.w  // r7.w <- <rotation return value>._m23

#line 52
  itof r2.w, l(0)
  dp4 r3.x, r5.xyzw, r2.xyzw  // r3.x <- v.x
  dp4 r3.y, r6.xyzw, r2.xyzw  // r3.y <- v.y
  dp4 r3.z, r7.xyzw, r2.xyzw  // r3.z <- v.z

#line 55
  add r2.xyz, r0.xyzx, r3.xyzx
  mul r3.xyz, r1.xyzx, cb2[4].wwww
  add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- P.x; r2.y <- P.y; r2.z <- P.z

#line 57
  itof r3.xyz, l(0, 0, 0, 0)  // r3.x <- p.x; r3.y <- p.y; r3.z <- p.z

#line 58
  itof r4.xyz, l(0, 0, 0, 0)  // r4.x <- n.x; r4.y <- n.y; r4.z <- n.z

#line 59
  mov r2.w, l(0)  // r2.w <- j
  mov r5.xyz, r4.xyzx  // r5.x <- n.x; r5.y <- n.y; r5.z <- n.z
  mov r6.x, r3.x  // r6.x <- p.x
  mov r6.y, r3.y  // r6.y <- p.y
  mov r6.z, r3.z  // r6.z <- p.z
  mov r3.w, r2.w  // r3.w <- j
  loop 
    ilt r4.w, r3.w, l(4)
    breakc_z r4.w

#line 61
    mov r4.w, r1.w
    dp4 r4.w, v[r4.w + 0][4].xyzw, icb[r3.w + 0].xyzw
    mov r5.w, r1.w
    and r7.xyzw, icb[r3.w + 4].xyzw, v[r5.w + 0][5].xyzw
    or r7.xy, r7.ywyy, r7.xzxx
    or r5.w, r7.y, r7.x
    imul null, r5.w, r5.w, l(4)
    mul r7.xyz, r2.xxxx, cb1[r5.w + 0].xyzx
    mul r8.xyz, r2.yyyy, cb1[r5.w + 1].xyzx
    add r7.xyz, r7.xyzx, r8.xyzx
    mul r8.xyz, r2.zzzz, cb1[r5.w + 2].xyzx
    add r7.xyz, r7.xyzx, r8.xyzx
    mul r8.xyz, l(1.000000, 1.000000, 1.000000, 0.000000), cb1[r5.w + 3].xyzx
    add r7.xyz, r7.xyzx, r8.xyzx
    mul r7.xyz, r4.wwww, r7.xyzx
    add r6.xyz, r7.xyzx, r6.xyzx

#line 62
    mov r4.w, r1.w
    dp4 r4.w, v[r4.w + 0][4].xyzw, icb[r3.w + 0].xyzw
    mov r5.w, r1.w
    itof r6.w, l(0)
    mov r7.x, r1.w
    and r7.xyzw, icb[r3.w + 4].xyzw, v[r7.x + 0][5].xyzw
    or r7.xy, r7.ywyy, r7.xzxx
    or r7.x, r7.y, r7.x
    imul null, r7.x, r7.x, l(4)
    mul r7.yzw, cb1[r7.x + 0].xxyz, v[r5.w + 0][1].xxxx
    mul r8.xyz, cb1[r7.x + 1].xyzx, v[r5.w + 0][1].yyyy
    add r7.yzw, r7.yyzw, r8.xxyz
    mul r8.xyz, cb1[r7.x + 2].xyzx, v[r5.w + 0][1].zzzz
    add r7.yzw, r7.yyzw, r8.xxyz
    mul r8.xyz, r6.wwww, cb1[r7.x + 3].xyzx
    add r7.xyz, r7.yzwy, r8.xyzx
    mul r7.xyz, r4.wwww, r7.xyzx
    add r5.xyz, r5.xyzx, r7.xyzx

#line 63
    iadd r3.w, r3.w, l(1)
  endloop 

#line 65
  dp3 r2.x, r5.xyzx, r5.xyzx
  rsq r2.x, r2.x
  mul r2.xyz, r2.xxxx, r5.xyzx  // r2.x <- N.x; r2.y <- N.y; r2.z <- N.z

#line 66
  mov r3.xyz, -cb0[4].xyzx
  dp3 r2.w, r3.xyzx, r3.xyzx
  rsq r2.w, r2.w
  mul r3.xyz, r2.wwww, r3.xyzx  // r3.x <- L.x; r3.y <- L.y; r3.z <- L.z

#line 67
  dp3 r2.x, r3.xyzx, r2.xyzx  // r2.x <- d

#line 68
  itof r2.y, l(0)
  max r2.x, r2.x, r2.y
  mul r2.x, r2.x, l(0.500000)
  add r2.x, r2.x, l(0.500000)  // r2.x <- power

#line 69
  mul r3.xyzw, r6.xxxx, cb0[0].xyzw
  mul r4.xyzw, r6.yyyy, cb0[1].xyzw
  add r3.xyzw, r3.xyzw, r4.xyzw
  mul r4.xyzw, r6.zzzz, cb0[2].xyzw
  add r3.xyzw, r3.xyzw, r4.xyzw
  mul r4.xyzw, cb0[3].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  add r3.xyzw, r3.xyzw, r4.xyzw  // r3.x <- element.Position.x; r3.y <- element.Position.y; r3.z <- element.Position.z; r3.w <- element.Position.w

#line 70
  mov r5.xyz, r5.xyzx  // r5.x <- element.wNormal.x; r5.y <- element.wNormal.y; r5.z <- element.wNormal.z

#line 71
  mov r6.x, r6.x  // r6.x <- element.wPosition.x
  mov r6.y, r6.y  // r6.y <- element.wPosition.y
  mov r6.z, r6.z  // r6.z <- element.wPosition.z

#line 72
  mov r2.yz, v[r1.w + 0][2].xxyx  // r2.y <- element.Tex.x; r2.z <- element.Tex.y

#line 73
  mul r4.xyz, cb2[0].xyzx, v[r1.w + 0][3].xyzx
  mul r4.xyz, r2.xxxx, r4.xyzx  // r4.x <- element.Color.x; r4.y <- element.Color.y; r4.z <- element.Color.z

#line 74
  mul r2.x, cb2[0].w, v[r1.w + 0][3].w  // r2.x <- element.Color.w

#line 75
  mov o0.xyzw, r3.xyzw
  mov o1.xyz, r4.xyzx
  mov o1.w, r2.x
  mov o2.xyz, r6.xyzx
  mov o3.xyz, r5.xyzx
  mov o4.xy, r2.yzyy
  emit 

#line 76
  iadd r1.w, r1.w, l(1)
endloop 

#line 78
cut 

#line 79
ret 
// Approximately 165 instruction slots used
