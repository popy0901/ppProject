//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_temps 3
//
// Initial variable locations:
//   v0.x <- position.x; v0.y <- position.y; v0.z <- position.z; v0.w <- position.w; 
//   v1.x <- color.x; v1.y <- color.y; v1.z <- color.z; v1.w <- color.w; 
//   v2.x <- texcoord.x; v2.y <- texcoord.y; 
//   o2.x <- <main return value>.Texcoord.x; o2.y <- <main return value>.Texcoord.y; 
//   o1.x <- <main return value>.Color.x; o1.y <- <main return value>.Color.y; o1.z <- <main return value>.Color.z; o1.w <- <main return value>.Color.w; 
//   o0.x <- <main return value>.Position.x; o0.y <- <main return value>.Position.y; o0.z <- <main return value>.Position.z; o0.w <- <main return value>.Position.w
//
#line 21 "C:\Users\popy\Desktop\個人\new lib\HLSL\GaussVS.hlsl"
mov r0.xyzw, v0.xyzw  // r0.x <- vout.Position.x; r0.y <- vout.Position.y; r0.z <- vout.Position.z; r0.w <- vout.Position.w

#line 22
mov r1.xyzw, v1.xyzw  // r1.x <- vout.Color.x; r1.y <- vout.Color.y; r1.z <- vout.Color.z; r1.w <- vout.Color.w

#line 23
mov r2.xy, v2.xyxx  // r2.x <- vout.Texcoord.x; r2.y <- vout.Texcoord.y

#line 25
mov o0.xyzw, r0.xyzw
mov o1.xyzw, r1.xyzw
mov o2.xy, r2.xyxx
ret 
// Approximately 7 instruction slots used
